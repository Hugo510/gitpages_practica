---
---

<div class="fr-viz">
  <div class="viz-header">
    <h3>Visualización de Unidades Fraccionarias (fr)</h3>
    <p>Las unidades fraccionarias dividen el espacio disponible en diseños CSS Grid, creando sistemas de cuadrícula flexibles y proporcionales.</p>
  </div>
  
  <div class="viz-controls">
    <div class="control-group">
      <label>Columnas de la Cuadrícula:</label>
      <div class="fr-buttons">
        <button class="fr-button active" data-template="1fr 1fr 1fr">1fr 1fr 1fr</button>
        <button class="fr-button" data-template="2fr 1fr 1fr">2fr 1fr 1fr</button>
        <button class="fr-button" data-template="1fr 2fr 1fr">1fr 2fr 1fr</button>
        <button class="fr-button" data-template="1fr 1fr 2fr">1fr 1fr 2fr</button>
        <button class="fr-button" data-template="1fr 3fr 1fr">1fr 3fr 1fr</button>
      </div>
    </div>
    
    <div class="control-group">
      <label for="gap-value">Espacio entre Elementos:</label>
      <input type="range" id="gap-value" min="0" max="40" value="16" step="4">
      <span id="gap-display-value">16px</span>
    </div>
  </div>
  
  <div class="viz-output">
    <div class="grid-container" id="grid-container">
      <div class="grid-item">1</div>
      <div class="grid-item">2</div>
      <div class="grid-item">3</div>
    </div>
    
    <div class="fr-info">
      <div class="fr-current">
        Plantilla actual: <code id="current-template">1fr 1fr 1fr</code>
      </div>
      <div class="fr-explanation">
        Cada columna toma <strong>una fracción igual</strong> del espacio disponible
      </div>
    </div>
  </div>
  
  <div class="fr-examples">
    <h4>Patrones Comunes de Unidades Fr</h4>
    
    <div class="example-tabs">
      <button class="tab-button active" data-tab="basic">Patrones Básicos</button>
      <button class="tab-button" data-tab="responsive">Cuadrículas Responsivas</button>
      <button class="tab-button" data-tab="mixed">Unidades Mixtas</button>
    </div>
    
    <div class="tab-content active" id="basic-tab">
      <div class="example-grid">
        <div class="example-item">
          <h5>Columnas Iguales</h5>
          <div class="grid-example" style="grid-template-columns: 1fr 1fr 1fr;">
            <div class="grid-example-item">1fr</div>
            <div class="grid-example-item">1fr</div>
            <div class="grid-example-item">1fr</div>
          </div>
          <code>grid-template-columns: 1fr 1fr 1fr;</code>
        </div>
        
        <div class="example-item">
          <h5>Diseño con Barra Lateral</h5>
          <div class="grid-example" style="grid-template-columns: 1fr 3fr;">
            <div class="grid-example-item">1fr</div>
            <div class="grid-example-item">3fr</div>
          </div>
          <code>grid-template-columns: 1fr 3fr;</code>
        </div>
      </div>
    </div>
    
    <div class="tab-content" id="responsive-tab">
      <div class="example-grid">
        <div class="example-item">
          <h5>Cuadrícula Auto-ajustable</h5>
          <div class="grid-example responsive-grid">
            <div class="grid-example-item">Elemento</div>
            <div class="grid-example-item">Elemento</div>
            <div class="grid-example-item">Elemento</div>
            <div class="grid-example-item">Elemento</div>
            <div class="grid-example-item">Elemento</div>
            <div class="grid-example-item">Elemento</div>
          </div>
          <code>grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));</code>
        </div>
      </div>
    </div>
    
    <div class="tab-content" id="mixed-tab">
      <div class="example-grid">
        <div class="example-item">
          <h5>Fijo + Flexible</h5>
          <div class="grid-example" style="grid-template-columns: 100px 1fr 1fr;">
            <div class="grid-example-item">100px</div>
            <div class="grid-example-item">1fr</div>
            <div class="grid-example-item">1fr</div>
          </div>
          <code>grid-template-columns: 100px 1fr 1fr;</code>
        </div>
        
        <div class="example-item">
          <h5>Porcentaje + Fr</h5>
          <div class="grid-example" style="grid-template-columns: 25% 1fr 1fr;">
            <div class="grid-example-item">25%</div>
            <div class="grid-example-item">1fr</div>
            <div class="grid-example-item">1fr</div>
          </div>
          <code>grid-template-columns: 25% 1fr 1fr;</code>
        </div>
      </div>
    </div>
  </div>
  
  <div class="viz-info">
    <h4>Características Principales:</h4>
    <ul>
      <li>Utilizadas exclusivamente en diseños CSS Grid</li>
      <li>Representan una fracción del espacio disponible en el contenedor de cuadrícula</li>
      <li>Crean diseños proporcionales que distribuyen el espacio según los ratios especificados</li>
      <li>Pueden mezclarse con otras unidades como px, % o auto</li>
      <li>1fr toma una parte, 2fr toma dos partes, etc., del espacio restante</li>
      <li>Ideal para diseños flexibles que necesitan mantener proporciones</li>
    </ul>
  </div>
</div>

<style>
  .fr-viz {
    padding: var(--spacing-3);
  }
  
  .viz-header {
    margin-bottom: var(--spacing-3);
  }
  
  .viz-header h3 {
    color: var(--color-error-700);
    margin-bottom: var(--spacing-1);
  }
  
  .viz-controls {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
    margin-bottom: var(--spacing-3);
    padding: var(--spacing-2);
    background-color: var(--color-neutral-100);
    border-radius: var(--border-radius-md);
  }
  
  .control-group {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-1);
  }
  
  .control-group label {
    font-weight: 500;
  }
  
  .fr-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 4px;
  }
  
  .fr-button {
    background-color: var(--color-neutral-200);
    border: none;
    border-radius: var(--border-radius-sm);
    padding: 6px 12px;
    font-family: monospace;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .fr-button:hover {
    background-color: var(--color-error-100);
  }
  
  .fr-button.active {
    background-color: var(--color-error-500);
    color: white;
  }
  
  .control-group:nth-child(2) {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--spacing-2);
    margin-top: var(--spacing-1);
  }
  
  .control-group:nth-child(2) label {
    min-width: 80px;
  }
  
  .control-group input[type="range"] {
    flex-grow: 1;
    max-width: 300px;
  }
  
  #gap-display-value {
    font-family: monospace;
    background-color: var(--color-error-100);
    padding: 4px 8px;
    border-radius: var(--border-radius-sm);
    color: var(--color-error-700);
    min-width: 60px;
    text-align: center;
  }
  
  .viz-output {
    margin-bottom: var(--spacing-3);
    border: 2px dashed var(--color-neutral-300);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-3);
    overflow: hidden;
  }
  
  .grid-container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 16px;
    margin-bottom: var(--spacing-3);
    height: 150px;
  }
  
  .grid-item {
    background-color: var(--color-error-500);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: 700;
    border-radius: var(--border-radius-sm);
    transition: all 0.3s ease;
  }
  
  .fr-info {
    background-color: var(--color-neutral-100);
    padding: var(--spacing-2);
    border-radius: var(--border-radius-sm);
    font-size: 0.9rem;
  }
  
  .fr-current {
    margin-bottom: 4px;
  }
  
  .fr-current code {
    font-family: monospace;
    background-color: var(--color-neutral-800);
    color: white;
  }
  
  .fr-explanation {
    color: var(--color-neutral-700);
  }
  
  .fr-examples {
    margin-top: var(--spacing-3);
    margin-bottom: var(--spacing-3);
    padding: var(--spacing-2);
    background-color: white;
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-sm);
  }
  
  .fr-examples h4 {
    color: var(--color-error-700);
    margin-bottom: var(--spacing-2);
  }
  
  .example-tabs {
    display: flex;
    border-bottom: 2px solid var(--color-neutral-200);
    margin-bottom: var(--spacing-2);
    gap: var(--spacing-1);
  }
  
  .tab-button {
    padding: 8px 16px;
    border: none;
    background: none;
    cursor: pointer;
    font-weight: 500;
    color: var(--color-neutral-600);
    border-bottom: 2px solid transparent;
    margin-bottom: -2px;
    transition: all 0.2s ease;
  }
  
  .tab-button:hover {
    color: var(--color-error-600);
  }
  
  .tab-button.active {
    color: var(--color-error-600);
    border-bottom-color: var(--color-error-500);
  }
  
  .tab-content {
    display: none;
  }
  
  .tab-content.active {
    display: block;
  }
  
  .example-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-2);
  }
  
  .example-item {
    padding: var(--spacing-2);
    background-color: var(--color-neutral-50);
    border-radius: var(--border-radius-sm);
  }
  
  .example-item h5 {
    margin-bottom: var(--spacing-1);
    font-size: 0.9rem;
    color: var(--color-neutral-700);
  }
  
  .grid-example {
    display: grid;
    gap: 8px;
    height: 80px;
    margin-bottom: 8px;
  }
  
  .responsive-grid {
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  }
  
  .grid-example-item {
    background-color: var(--color-error-300);
    color: var(--color-error-900);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.9rem;
    font-weight: 500;
    border-radius: var(--border-radius-sm);
  }
  
  .example-item code {
    display: block;
    font-size: 0.8rem;
    white-space: nowrap;
    overflow: auto;
    background-color: var(--color-neutral-800);
    color: white;
    padding: 6px 8px;
  }
  
  .viz-info {
    background-color: var(--color-error-50);
    padding: var(--spacing-2);
    border-radius: var(--border-radius-md);
    border-left: 4px solid var(--color-error-500);
  }
  
  .viz-info h4 {
    color: var(--color-error-700);
    margin-bottom: var(--spacing-1);
  }
  
  .viz-info ul {
    margin: 0;
    padding-left: var(--spacing-3);
  }
  
  .viz-info li {
    margin-bottom: 4px;
  }
  
  @media (max-width: 768px) {
    .fr-buttons {
      flex-wrap: wrap;
    }
    
    .control-group:nth-child(2) {
      flex-wrap: wrap;
    }
    
    .example-tabs {
      overflow-x: auto;
      padding-bottom: 4px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const frButtons = document.querySelectorAll('.fr-button');
    const gapValue = document.getElementById('gap-value') as HTMLInputElement;
    const gapDisplayValue = document.getElementById('gap-display-value');
    const gridContainer = document.getElementById('grid-container');
    const currentTemplate = document.getElementById('current-template');
    const frExplanation = document.querySelector('.fr-explanation');
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    if (frButtons.length && gapValue && gapDisplayValue && gridContainer && currentTemplate && frExplanation) {
      
      // Handle template changes
      frButtons.forEach(button => {
        button.addEventListener('click', () => {
          const template = button.getAttribute('data-template') ?? '';
          
          // Update active button
          frButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          
          // Apply the template
          gridContainer.style.gridTemplateColumns = template;
          currentTemplate.textContent = template;
          
          // Update explanation
          updateExplanation(template);
        });
      });
      
      // Handle gap changes
      gapValue.addEventListener('input', () => {
        const gap = gapValue.value;
        gapDisplayValue.textContent = `${gap}px`;
        gridContainer.style.gap = `${gap}px`;
      });
      
      // Tab functionality
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const tabId = button.getAttribute('data-tab');
          
          // Update active button
          tabButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          
          // Show selected tab content
          tabContents.forEach(content => {
            content.classList.remove('active');
            if (content.id === `${tabId}-tab`) {
              content.classList.add('active');
            }
          });
        });
      });
      
      // Helper function to update explanation
      function updateExplanation(template: string) {
        const parts = template.split(' ');
        
        if (!frExplanation) return; // Early return if frExplanation is null
        
        if (parts.every(part => part === '1fr')) {
          frExplanation.innerHTML = 'Cada columna toma <strong>una fracción igual</strong> del espacio disponible';
        } else {
          // Count the total fractions
          const totalFr = parts.reduce((sum, part) => {
            const frValue = parseFloat(part);
            return isNaN(frValue) ? sum : sum + frValue;
          }, 0);
          
          frExplanation.innerHTML = `El espacio disponible se divide en <strong>${totalFr} partes iguales</strong>, con columnas tomando sus porciones especificadas`;
        }
      }
      
      // Initialize with default values
      updateExplanation('1fr 1fr 1fr');
    }
  });
</script>